 Difference between HTTP1.1 vs HTTP2

 HTTP1 

 Developed by Timothy Berners-Lee in 1989 as a communication standard for the World Wide Web,
  HTTP is a top-level application protocol that exchanges information between a client computer and a local or remote web server. 
  In this process, a client sends a text-based request to a server by calling a method like GET or POST.
   In response, the server sends a resource like an HTML page back to the client.

For example, let’s say you are visiting a website at the domain www.example.com. 
When you navigate to this URL, the web browser on your computer sends an HTTP request in the form of a text-based message, similar to the one shown here0:
This request uses the GET method, which asks for data from the host server listed after Host:. 
In response to this request, the example.com web server returns an HTML page to the requesting client, in addition to any images, stylesheets, or other resources called for in the HTML.
 Note that not all of the resources are returned to the client in the first call for data.
 The requests and responses will go back and forth between the server and client until the web browser has received all the resources necessary to render the contents of the HTML page on your screen.
You can think of this exchange of requests and responses as a single application layer of the internet protocol stack, sitting on top of the transfer layer (usually using the Transmission Control Protocol, or TCP) and networking layers (using the Internet Protocol, or IP):


HTTP2

HTTP/2 began as the SPDY protocol, 
developed primarily at Google with the intention of reducing web page load latency by using techniques such as compression, multiplexing, and prioritization. 
This protocol served as a template for HTTP/2 when the Hypertext Transfer Protocol working group httpbis of the IETF (Internet Engineering Task Force) put the standard together, culminating in the publication of HTTP/2 in May 2015.
 From the beginning, many browsers supported this standardization effort, including Chrome, Opera, Internet Explorer, and Safari.
  Due in part to this browser support, there has been a significant adoption rate of the protocol since 2015, with especially high rates among new sites.

object 

Objects, in JavaScript, is it’s most important data-type and forms the building blocks for modern JavaScript. 
These objects are quite different from JavaScript’s primitive data-types(Number, String, Boolean, null, undefined and symbol) .
the sense that while these primitive data-types all store a single value each (depending on their types).
Objects are more complex and each object may contain any combination of these primitive data-types as well as reference data-types.
An object, is a reference data type. Variables that are assigned a reference value are given a reference or a pointer to that value. 
That reference or pointer points to the location in memory where the object is stored. The variables don’t actually store the value.
Loosely speaking, objects in JavaScript may be defined as an unordered collection of related data, of primitive or reference types, in the form of “key: value” pairs. 
These keys can be variables or functions and are called properties and methods, respectively, in the context of an object.
For Eg. If your object is a student, it will have properties like name, age, address, id, etc and methods like updateAddress, updateNam, etc.

Objects and properties
A JavaScript object has properties associated with it.
A property of an object can be explained as a variable that is attached to the object.
Object properties are basically the same as ordinary JavaScript variables, except for the attachment to objects. 
The properties of an object define the characteristics of the object. You access the properties of an object with a simple dot-notation:
Like all JavaScript variables, both the object name (which could be a normal variable) and property name are case sensitive. 
You can define a property by assigning it a value
Properties of JavaScript objects can also be accessed or set using a bracket notation (for more details see property accessors). 
Objects are sometimes called associative arrays, since each property is associated with a string value that can be used to access it.
An object property name can be any valid JavaScript string, or anything that can be converted to a string, including the empty string. 
However, any property name that is not a valid JavaScript identifier (for example, a property name that has a space or a hyphen, or that starts with a number) can only be accessed using the square bracket notation. 
This notation is also very useful when property names are to be dynamically determined (when the property name is not determined until runtime). 
